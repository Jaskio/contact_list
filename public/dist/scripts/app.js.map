{"version":3,"sources":["main.module.js","controllers/contact.controller.js","filters/search.filter.js","filters/startFrom.filter.js","directives/pagination.directive.js","services/contact.service.js"],"names":["config","$routeProvider","$locationProvider","hashPrefix","when","templateUrl","controller","controllerAs","test","runFn","$location","$rootScope","$on","event","next","current","angular","module","run","$inject","ContactsController","ContactsService","$route","_getContacts","id","getContacts","then","response","vm","form_data","contacts","err","console","log","_addContact","addContact","_updateContact","updateContact","_deleteContact","deleteContact","this","URL_ID","params","searchTerm","currentPage","pageSize","search","term","filtered_contacts","forEach","contact","first_name","toLowerCase","startsWith","last_name","email","push","phone","number","filter","startFrom","input","start","slice","pagination","restrict","scope","items","PaginationController","bindToController","link","linkFn","element","attrs","$scope","_paginationSetup","maxPages","Math","ceil","length","$watch","original","setPage","page","generatePages","no_of_pages","pages","i","directive","$q","$http","defer","provided_id","get","ENDPOINT_PATH","resolve","data","reject","promise","post","put","delete","service"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\r\n    \"use strict\";\r\n\r\n    angular\r\n        .module('phonebook', [\r\n            'ngRoute'\r\n        ]);\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .config(config)\r\n        .run(runFn);\r\n\r\n        config.$inject = [\r\n            '$routeProvider', \r\n            '$locationProvider'\r\n        ];\r\n\r\n        function config($routeProvider, $locationProvider){\r\n\r\n            $locationProvider.hashPrefix('');\r\n\r\n            $routeProvider\r\n                .when('/', {\r\n                    templateUrl: 'dist/views/contacts.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/add', {\r\n                    templateUrl: 'dist/views/add_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/:id/edit', {\r\n                    templateUrl: 'dist/views/edit_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/:id/delete', {\r\n                    templateUrl: 'dist/views/delete_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC',\r\n                    test: 'test'\r\n                })\r\n        };\r\n\r\n        runFn.$inject = [\r\n            '$location',\r\n            '$rootScope'\r\n        ];\r\n\r\n        function runFn($location, $rootScope) {\r\n            $rootScope.$on('$routeChangeStart', function(event, next, current) {\r\n\r\n            });\r\n        };\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .controller('ContactsController', ContactsController);\r\n\r\n        ContactsController.$inject = [\r\n            'ContactsService',\r\n            '$route'\r\n        ];\r\n\r\n        function ContactsController(ContactsService, $route) {\r\n            var vm = this;\r\n            var URL_ID = $route.current.params.id;\r\n    \r\n            vm.contacts = [];\r\n            vm.form_data = {};\r\n            vm.searchTerm = '';\r\n            vm.currentPage = 0;\r\n            vm.pageSize = 3;\r\n\r\n            _init();\r\n\r\n            function _init() {\r\n                _getContacts(URL_ID);\r\n\r\n                vm.addContact = _addContact;\r\n                vm.updateContact = _updateContact;\r\n                vm.deleteContact = _deleteContact;\r\n            }\r\n\r\n            function _getContacts(id) {\r\n                ContactsService.getContacts(id)\r\n                    .then(function(response) {\r\n                        if (id) {\r\n                            vm.form_data = response;\r\n                        } else {\r\n                            vm.contacts = response;\r\n                        }\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            function _addContact() {\r\n                ContactsService.addContact(vm.form_data)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            function _updateContact() {\r\n                ContactsService.updateContact(vm.form_data)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            function _deleteContact() {\r\n                ContactsService.deleteContact(vm.form_data.id)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n        };\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .filter('search', search);\r\n\r\n        function search() {\r\n            return function(contacts, term) {\r\n                var filtered_contacts = [];\r\n\r\n                contacts.forEach(function(contact) {\r\n                    if (contact.first_name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n                        contact.last_name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n                        contact.email.toLowerCase().startsWith(term.toLowerCase())) {\r\n\r\n                        filtered_contacts.push(contact);\r\n                    } else {\r\n                        contact.phone.forEach(function(phone) {\r\n                            if (phone.number.toLowerCase().startsWith(term.toLowerCase())) {\r\n                                filtered_contacts.push(contact);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                return filtered_contacts;\r\n            }\r\n        }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .filter('startFrom', startFrom);\r\n\r\n        function startFrom() {\r\n            return function(input, start) {\r\n                start = +start;\r\n                return input ? input.slice(start) : [];\r\n            }\r\n        }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .directive('pagination', pagination);\r\n\r\n        function pagination() {\r\n            var directive = {\r\n                restrict: 'E',\r\n                scope: {\r\n                    items: '=',\r\n                    pageSize: '=',\r\n                    currentPage: '='\r\n                },\r\n                templateUrl: 'dist/views/pagination.html',\r\n                controller: PaginationController,\r\n                controllerAs: 'PGC',\r\n                bindToController: true,\r\n                link: linkFn\r\n            };\r\n\r\n            return directive;\r\n        }\r\n\r\n        function linkFn(scope, element, attrs) {}\r\n\r\n        PaginationController.$inject = [\r\n            '$scope'\r\n        ];\r\n\r\n        function PaginationController($scope) {\r\n            var vm = this;\r\n\r\n            /**\r\n             * Watches the items variable, and calls for _paginationSetup() function when the variable\r\n             * changes the value\r\n             */\r\n            $scope.$watch(function () {\r\n                return vm.items;\r\n            }, function(current, original) {\r\n                if (current.length) \r\n                    _paginationSetup();\r\n            });\r\n\r\n            /**\r\n             * Watches the vm.pageSize, and calls for _paginationSetup() function when the variable\r\n             * changes the value\r\n             */\r\n            $scope.$watch(function () {\r\n                return vm.pageSize;\r\n            }, _paginationSetup);\r\n\r\n            /**\r\n             * Sets current page\r\n             * \r\n             * @param {[Integer]} page [current page number]\r\n             */\r\n            vm.setPage = function(page) {\r\n                vm.currentPage = page;\r\n            };\r\n\r\n            /**\r\n             * Generates an array of numbers, which represent pages\r\n             * \r\n             * @param  {[Integer]} no_of_pages [Number of pages to be generated]\r\n             */\r\n            vm.generatePages = function(no_of_pages) {\r\n                var pages = [];\r\n                for (var i = 1; i <= no_of_pages; i++) {\r\n                    pages.push(i);\r\n                }\r\n                return pages;\r\n            };\r\n\r\n            /**\r\n             * Sets the maximum number of pages based on array length\r\n             */\r\n            function _paginationSetup() {\r\n                vm.maxPages = Math.ceil(vm.items.length / vm.pageSize);\r\n                if (vm.items.length / vm.pageSize < 1 &&\r\n                    vm.items.length / vm.pageSize > 0) {\r\n                    vm.maxPages = 1;\r\n                }\r\n                if(vm.items.length == 0) vm.maxPages = 0;\r\n            }\r\n        }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .service('ContactsService', ContactsService);\r\n\r\n        ContactsService.$inject = ['$q', '$http'];\r\n\r\n        function ContactsService($q, $http) {\r\n            var service = {};\r\n            var ENDPOINT_PATH = 'http://localhost:3000/contacts/';\r\n\r\n            _init();\r\n\r\n            function _init() {\r\n                service.getContacts = _getContacts;\r\n                service.addContact = _addContact;\r\n                service.updateContact = _updateContact;\r\n                service.deleteContact = _deleteContact;\r\n            }\r\n\r\n            \r\n            function _getContacts(id) {\r\n                var defer = $q.defer();\r\n                var provided_id = id || '';\r\n\r\n                $http.get(ENDPOINT_PATH + provided_id)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            function _addContact(data) {\r\n                var defer = $q.defer();\r\n\r\n                $http.post(ENDPOINT_PATH, data)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            function _updateContact(data) {\r\n                var defer = $q.defer();\r\n\r\n                $http.put(ENDPOINT_PATH + data.id, data)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            function _deleteContact(id) {\r\n                var defer = $q.defer();\r\n\r\n                $http.delete(ENDPOINT_PATH + id)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            return service;\r\n        };\r\n})();\r\n"]}