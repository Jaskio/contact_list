{"version":3,"sources":["main.module.js","controllers/contact.controller.js","directives/pagination.directive.js","directives/siteNavigation.directive.js","filters/search.filter.js","filters/startFrom.filter.js","services/contact.service.js"],"names":["config","$routeProvider","$locationProvider","hashPrefix","when","templateUrl","controller","controllerAs","runFn","$location","$rootScope","$on","event","next","current","angular","module","run","$inject","ContactsController","ContactsService","$route","_showForm","contact","vm","mergeFormVisible","merged_contact","phone_numbers","forEach","single_contact","preparedToDelete","push","id","phone","_mergeList","mergeListVisible","sorted","_","orderBy","contacts","results","i","length","first_name","last_name","uniq","merge_list","groupBy","_mergeProcess","key_to_delete","Object","keys","key","index","map","contact_duped","_deleteContact","_addContact","_newContact","address","postal_code","city","country","email","_addPhone","form_data","number","phone_number","_getContacts","getContacts","then","response","err","console","log","addContact","_updateContact","updateContact","provided_id","deleteContact","confirmDelete","this","URL_ID","params","searchTerm","currentPage","pageSize","showForm","mergeList","mergeProcess","addPhone","pagination","restrict","scope","items","PaginationController","bindToController","link","linkFn","element","attrs","$scope","_paginationSetup","maxPages","Math","ceil","$watch","original","setPage","page","generatePages","no_of_pages","pages","directive","siteNavigation","back","forward","NavigationController","childNodes","on","history","$apply","search","term","filtered_contacts","toLowerCase","startsWith","filter","startFrom","input","start","slice","$q","$http","defer","get","ENDPOINT_PATH","resolve","data","reject","promise","post","put","delete","service"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\r\n    \"use strict\";\r\n\r\n    angular\r\n        .module('phonebook', [\r\n            'ngRoute',\r\n            'angular.filter'\r\n        ]);\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .config(config)\r\n        .run(runFn);\r\n\r\n        config.$inject = [\r\n            '$routeProvider', \r\n            '$locationProvider'\r\n        ];\r\n\r\n        function config($routeProvider, $locationProvider) {\r\n\r\n            $locationProvider.hashPrefix('');\r\n\r\n            $routeProvider\r\n                .when('/', {\r\n                    templateUrl: 'dist/views/contacts.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/add', {\r\n                    templateUrl: 'dist/views/add_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/:id/edit', {\r\n                    templateUrl: 'dist/views/edit_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n        };\r\n\r\n        runFn.$inject = [\r\n            '$location',\r\n            '$rootScope'\r\n        ];\r\n\r\n        function runFn($location, $rootScope) {\r\n            $rootScope.$on('$routeChangeStart', function(event, next, current) {\r\n\r\n            });\r\n        };\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .controller('ContactsController', ContactsController);\r\n\r\n        ContactsController.$inject = [\r\n            'ContactsService',\r\n            '$route',\r\n            '$location'\r\n        ];\r\n\r\n        function ContactsController(ContactsService, $route, $location) {\r\n            var vm = this;\r\n            var URL_ID = $route.current.params.id;\r\n    \r\n            vm.contacts = [];\r\n            // vm.form_data = {};\r\n            vm.merge_list = {};\r\n            vm.phone_number = '';\r\n            vm.searchTerm = '';\r\n            vm.currentPage = 0;\r\n            vm.pageSize = 3;\r\n            vm.mergeFormVisible = false;\r\n            vm.mergeListVisible = false;\r\n            vm.preparedToDelete = [];\r\n            vm.confirmDelete = false;\r\n\r\n            _init();\r\n\r\n            function _init() {\r\n                _getContacts(URL_ID);\r\n                vm.form_data = _newContact();\r\n                \r\n                vm.addContact = _addContact;\r\n                vm.updateContact = _updateContact;\r\n                vm.deleteContact = _deleteContact;\r\n                vm.showForm = _showForm;\r\n                vm.mergeList = _mergeList;\r\n                vm.mergeProcess = _mergeProcess;\r\n                vm.addPhone = _addPhone;\r\n            }\r\n\r\n            function _showForm(contact) {\r\n                vm.mergeFormVisible = true;\r\n                vm.merged_contact = contact;\r\n                vm.phone_numbers = [];\r\n                // vm.form_data = _newContact();\r\n\r\n                vm.merged_contact.forEach(function(single_contact) {\r\n                    vm.preparedToDelete.push(single_contact.id);\r\n                    single_contact.phone.forEach(function(phone) {\r\n                        vm.phone_numbers.push(phone);\r\n                    });\r\n                });\r\n\r\n                // vm.phone_numbers = _.uniqBy(vm.phone_numbers, 'number');\r\n            }\r\n\r\n\r\n            function _mergeList() {\r\n                vm.mergeListVisible = true;\r\n                \r\n\r\n                var sorted = _.orderBy(vm.contacts, ['first_name', 'last_name']),\r\n                    results = [];\r\n\r\n                for (var i = 0; i < sorted.length - 1; i++) {\r\n                    if (sorted[i + 1].first_name == sorted[i].first_name &&\r\n                        sorted[i + 1].last_name == sorted[i].last_name) {\r\n                        results.push(sorted[i]);\r\n                        results.push(sorted[i + 1]);\r\n                    }\r\n                }\r\n\r\n                var uniq = _.uniq(results);\r\n\r\n                vm.merge_list = _.groupBy(uniq, 'first_name');\r\n            }\r\n\r\n\r\n            function _mergeProcess() {\r\n                var key_to_delete = '';\r\n\r\n                Object.keys(vm.merge_list).forEach(function(key, index) {\r\n                    vm.merge_list[key].map(function(contact_duped) {\r\n                        if (contact_duped.id == vm.preparedToDelete[0]) {\r\n                            key_to_delete = key;\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                delete vm.merge_list[key_to_delete];\r\n                    \r\n                // only way to make multiple delete request\r\n                vm.preparedToDelete.forEach(function(id) {\r\n                    _deleteContact(id);\r\n                });\r\n\r\n                _addContact();\r\n\r\n                vm.preparedToDelete = [];\r\n            }\r\n\r\n            function _newContact() {\r\n                return {\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    address: '',\r\n                    postal_code: '',\r\n                    city: '',\r\n                    country: '',\r\n                    phone: [],\r\n                    email: ''\r\n                }\r\n            }\r\n\r\n            function _addPhone() {\r\n                vm.form_data.phone.push(\r\n                    {number: vm.phone_number}\r\n                );\r\n\r\n                vm.phone_number = '';\r\n            }\r\n\r\n            function _getContacts(id) {\r\n                ContactsService.getContacts(id)\r\n                    .then(function(response) {\r\n                        if (id) {\r\n                            vm.form_data = response;\r\n                        } else {\r\n                            vm.contacts = response;\r\n                        }\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            function _addContact() {\r\n                ContactsService.addContact(vm.form_data)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                        _getContacts(null);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            function _updateContact() {\r\n                ContactsService.updateContact(vm.form_data)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            function _deleteContact(id) {\r\n                var provided_id = id || vm.form_data.id;\r\n\r\n                ContactsService.deleteContact(provided_id)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                        _getContacts(null);\r\n                        vm.confirmDelete = false;\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n        };\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .directive('pagination', pagination);\r\n\r\n        function pagination() {\r\n            var directive = {\r\n                restrict: 'E',\r\n                scope: {\r\n                    items: '=',\r\n                    pageSize: '=',\r\n                    currentPage: '='\r\n                },\r\n                templateUrl: 'dist/views/pagination.html',\r\n                controller: PaginationController,\r\n                controllerAs: 'PGC',\r\n                bindToController: true,\r\n                link: linkFn\r\n            };\r\n\r\n            return directive;\r\n        }\r\n\r\n        function linkFn(scope, element, attrs) {}\r\n\r\n        PaginationController.$inject = [\r\n            '$scope'\r\n        ];\r\n\r\n        function PaginationController($scope) {\r\n            var vm = this;\r\n\r\n            /**\r\n             * Watches the items variable, and calls for _paginationSetup() function when the variable\r\n             * changes the value\r\n             */\r\n            $scope.$watch(function () {\r\n                return vm.items;\r\n            }, function(current, original) {\r\n                if (current.length) \r\n                    _paginationSetup();\r\n            });\r\n\r\n            /**\r\n             * Watches the vm.pageSize, and calls for _paginationSetup() function when the variable\r\n             * changes the value\r\n             */\r\n            $scope.$watch(function () {\r\n                return vm.pageSize;\r\n            }, _paginationSetup);\r\n\r\n            /**\r\n             * Sets current page\r\n             * \r\n             * @param {[Integer]} page [current page number]\r\n             */\r\n            vm.setPage = function(page) {\r\n                vm.currentPage = page;\r\n            };\r\n\r\n            /**\r\n             * Generates an array of numbers, which represent pages\r\n             * \r\n             * @param  {[Integer]} no_of_pages [Number of pages to be generated]\r\n             */\r\n            vm.generatePages = function(no_of_pages) {\r\n                var pages = [];\r\n                for (var i = 1; i <= no_of_pages; i++) {\r\n                    pages.push(i);\r\n                }\r\n                return pages;\r\n            };\r\n\r\n            /**\r\n             * Sets the maximum number of pages based on array length\r\n             */\r\n            function _paginationSetup() {\r\n                vm.maxPages = Math.ceil(vm.items.length / vm.pageSize);\r\n                if (vm.items.length / vm.pageSize < 1 &&\r\n                    vm.items.length / vm.pageSize > 0) {\r\n                    vm.maxPages = 1;\r\n                }\r\n                if(vm.items.length == 0) vm.maxPages = 0;\r\n            }\r\n        }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .directive('siteNavigation', siteNavigation);\r\n\r\n        function siteNavigation() {\r\n            var directive = {\r\n                restrict: 'E',\r\n                scope: {\r\n                    back: '@back',\r\n                    forward: '@forward'\r\n                },\r\n                templateUrl: 'dist/views/site_navigation.html',\r\n                controller: NavigationController,\r\n                controllerAs: 'NC',\r\n                bindToController: true,\r\n                link: linkFn\r\n            };\r\n\r\n            return directive;\r\n        }\r\n\r\n        function linkFn(scope, element, attrs) {\r\n            angular.element(element[0].childNodes[0].childNodes[1]).on('click', function() {\r\n                history.back();\r\n                scope.$apply();\r\n            });\r\n\r\n            angular.element(element[0].childNodes[0].childNodes[3]).on('click', function() {\r\n                history.forward();\r\n                scope.$apply();\r\n            });\r\n        }\r\n\r\n        NavigationController.$inject = [\r\n            '$scope'\r\n        ];\r\n\r\n        function NavigationController($scope) {\r\n            var vm = this;\r\n        }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .filter('search', search);\r\n\r\n        function search() {\r\n            return function(contacts, term) {\r\n                var filtered_contacts = [];\r\n\r\n                contacts.forEach(function(contact) {\r\n                    if (contact.first_name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n                        contact.last_name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n                        contact.email.toLowerCase().startsWith(term.toLowerCase())) {\r\n\r\n                        filtered_contacts.push(contact);\r\n                    } else {\r\n                        contact.phone.forEach(function(phone) {\r\n                            if (phone.number.toLowerCase().startsWith(term.toLowerCase())) {\r\n                                filtered_contacts.push(contact);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                return filtered_contacts;\r\n            }\r\n        }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .filter('startFrom', startFrom);\r\n\r\n        function startFrom() {\r\n            return function(input, start) {\r\n                start = +start;\r\n                return input ? input.slice(start) : [];\r\n            }\r\n        }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .service('ContactsService', ContactsService);\r\n\r\n        ContactsService.$inject = ['$q', '$http'];\r\n\r\n        function ContactsService($q, $http) {\r\n            var service = {};\r\n            var ENDPOINT_PATH = 'http://localhost:3000/contacts/';\r\n\r\n            _init();\r\n\r\n            function _init() {\r\n                service.getContacts = _getContacts;\r\n                service.addContact = _addContact;\r\n                service.updateContact = _updateContact;\r\n                service.deleteContact = _deleteContact;\r\n            }\r\n\r\n            \r\n            function _getContacts(id) {\r\n                var defer = $q.defer();\r\n                var provided_id = id || '';\r\n\r\n                $http.get(ENDPOINT_PATH + provided_id)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            function _addContact(data) {\r\n                var defer = $q.defer();\r\n\r\n                $http.post(ENDPOINT_PATH, data)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            function _updateContact(data) {\r\n                var defer = $q.defer();\r\n\r\n                $http.put(ENDPOINT_PATH + data.id, data)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            function _deleteContact(id) {\r\n                var defer = $q.defer();\r\n\r\n                $http.delete(ENDPOINT_PATH + id)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            return service;\r\n        };\r\n})();\r\n"]}