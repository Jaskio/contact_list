{"version":3,"sources":["main.module.js","controllers/contact.controller.js","filters/search.filter.js","filters/startFrom.filter.js","services/contact.service.js","directives/pagination.directive.js","directives/siteNavigation.directive.js"],"names":["config","$routeProvider","$locationProvider","hashPrefix","when","templateUrl","controller","controllerAs","runFn","$location","$rootScope","$on","event","next","current","angular","module","run","$inject","ContactsController","ContactsService","$route","$timeout","_showForm","contact","vm","mergeFormVisible","merged_contact","phone_numbers","form_data","_newContact","forEach","single_contact","preparedToDelete","push","id","phone","_slideToElement","$","animate","scrollTop","offset","top","_setURL","path","_mergeList","mergeListVisible","sorted","_","orderBy","contacts","results","i","length","first_name","last_name","haveMergeList","uniq","merge_list","groupBy","_mergeProcess","key_to_delete","Object","keys","key","index","map","contact_duped","JSON","parse","_deleteContact","_addContact","address","postal_code","city","country","email","_addPhone","number","phone_number","_formValidation","regex","test","_mergeValidation","_getContacts","getContacts","then","response","err","console","log","addContact","successMessage","_updateContact","updateContact","provided_id","deleteContact","confirmDelete","this","URL_ID","params","searchTerm","currentPage","pageSize","showForm","mergeList","mergeProcess","addPhone","formValidation","mergeValidation","setURL","search","term","filtered_contacts","toLowerCase","startsWith","filter","startFrom","input","start","slice","$q","$http","defer","get","ENDPOINT_PATH","resolve","data","reject","promise","post","put","delete","service","pagination","restrict","scope","items","PaginationController","bindToController","link","linkFn","element","attrs","$scope","_paginationSetup","maxPages","Math","ceil","$watch","original","setPage","page","generatePages","no_of_pages","pages","directive","siteNavigation","back","forward","NavigationController","childNodes","on","history","$apply"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\r\n    \"use strict\";\r\n\r\n    angular\r\n        .module('phonebook', [\r\n            'ngRoute',\r\n            'angular.filter'\r\n        ]);\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .config(config)\r\n        .run(runFn);\r\n\r\n        config.$inject = [\r\n            '$routeProvider', \r\n            '$locationProvider'\r\n        ];\r\n\r\n        function config($routeProvider, $locationProvider) {\r\n\r\n            $locationProvider.hashPrefix('');\r\n\r\n            $routeProvider\r\n                .when('/', {\r\n                    templateUrl: 'dist/views/contacts.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/add', {\r\n                    templateUrl: 'dist/views/add_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/:id/edit', {\r\n                    templateUrl: 'dist/views/edit_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n        };\r\n\r\n        runFn.$inject = [\r\n            '$location',\r\n            '$rootScope'\r\n        ];\r\n\r\n        function runFn($location, $rootScope) {\r\n            $rootScope.$on('$routeChangeStart', function(event, next, current) {\r\n\r\n            });\r\n        };\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .controller('ContactsController', ContactsController);\r\n\r\n        ContactsController.$inject = [\r\n            'ContactsService',\r\n            '$route',\r\n            '$location',\r\n            '$timeout'\r\n        ];\r\n\r\n        function ContactsController(ContactsService, $route, $location, $timeout) {\r\n            var vm = this;\r\n            var URL_ID = $route.current.params.id;\r\n    \r\n            vm.contacts = [];\r\n            vm.merge_list = {};\r\n            vm.phone_number = '';\r\n            vm.searchTerm = '';\r\n            vm.currentPage = 0;\r\n            vm.pageSize = 3;\r\n            vm.mergeFormVisible = false;\r\n            vm.mergeListVisible = false;\r\n            vm.preparedToDelete = [];\r\n            vm.confirmDelete = false;\r\n            vm.successMessage = false;\r\n\r\n            _init();\r\n\r\n            /**\r\n             * Init function\r\n             */\r\n            function _init() {\r\n                _getContacts(URL_ID);\r\n                vm.form_data = _newContact();\r\n                \r\n                vm.addContact = _addContact;\r\n                vm.updateContact = _updateContact;\r\n                vm.deleteContact = _deleteContact;\r\n                vm.showForm = _showForm;\r\n                vm.mergeList = _mergeList;\r\n                vm.mergeProcess = _mergeProcess;\r\n                vm.addPhone = _addPhone;\r\n                vm.formValidation = _formValidation;\r\n                vm.mergeValidation = _mergeValidation;\r\n                vm.setURL = _setURL;\r\n            }\r\n\r\n            /**\r\n             * After merge list is populated this function is called when we \r\n             * need to display merge contact information\r\n             * \r\n             * @param {Object} contact \r\n             */\r\n            function _showForm(contact) {\r\n                vm.mergeFormVisible = true;\r\n                vm.merged_contact = contact;\r\n                vm.phone_numbers = [];\r\n                vm.form_data = _newContact();\r\n\r\n                vm.merged_contact.forEach(function(single_contact) {\r\n                    vm.preparedToDelete.push(single_contact.id);\r\n                    single_contact.phone.forEach(function(phone) {\r\n                        vm.phone_numbers.push(phone);\r\n                    });\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Slide animation on opening merge list\r\n             */\r\n            function _slideToElement() {\r\n                $('html, body').animate({\r\n                    scrollTop: $('.row').offset().top\r\n                }, 700);\r\n            }\r\n\r\n            /**\r\n             * Set proper url\r\n             * \r\n             * @param {String} path \r\n             */\r\n            function _setURL(path) {\r\n                $location.path(path)\r\n            }\r\n\r\n            /**\r\n             * Function is used to generate and show list of contacts \r\n             * available for merging\r\n             */\r\n            function _mergeList() {\r\n                vm.mergeListVisible = true;\r\n                _slideToElement();\r\n    \r\n                var sorted = _.orderBy(vm.contacts, ['first_name', 'last_name']),\r\n                    results = [];\r\n\r\n                for (var i = 0; i < sorted.length - 1; i++) {\r\n                    if (sorted[i + 1].first_name == sorted[i].first_name &&\r\n                        sorted[i + 1].last_name == sorted[i].last_name) {\r\n                        results.push(sorted[i]);\r\n                        results.push(sorted[i + 1]);\r\n                        vm.haveMergeList = true;\r\n                    }\r\n                }\r\n\r\n                var uniq = _.uniq(results);\r\n                vm.merge_list = _.groupBy(uniq, 'first_name');\r\n            }\r\n\r\n            /**\r\n             * Final stage of merging is done here, newly merged contact is \r\n             * removed from current merge list \r\n             */\r\n            function _mergeProcess() {\r\n                var key_to_delete = '';\r\n\r\n                Object.keys(vm.merge_list).forEach(function(key, index) {\r\n                    vm.merge_list[key].map(function(contact_duped) {\r\n                        if (contact_duped.id == vm.preparedToDelete[0]) {\r\n                            key_to_delete = key;\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                vm.form_data.first_name = vm.merge_list[key_to_delete][0].first_name;\r\n                vm.form_data.last_name = vm.merge_list[key_to_delete][0].last_name;\r\n\r\n                var phone_numbers = [];\r\n                vm.form_data.phone.forEach(function(phone) {\r\n                    phone_numbers.push(JSON.parse(phone));\r\n                });\r\n\r\n                vm.form_data.phone = phone_numbers;\r\n                \r\n                delete vm.merge_list[key_to_delete];\r\n    \r\n                // only way to make multiple delete request\r\n                vm.preparedToDelete.forEach(function(id) {\r\n                    _deleteContact(id);\r\n                });\r\n\r\n                // timeout is needed because of multiple delete requests\r\n                $timeout(function() {\r\n                    _addContact();\r\n                    vm.preparedToDelete = [];\r\n                    vm.mergeFormVisible = false;\r\n                }, 800);\r\n            }\r\n\r\n            /**\r\n             * Helper function for creating new form data object\r\n             */\r\n            function _newContact() {\r\n                return {\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    address: '',\r\n                    postal_code: '',\r\n                    city: '',\r\n                    country: '',\r\n                    phone: [],\r\n                    email: ''\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Is used to create array of newly created phone numbers\r\n             */\r\n            function _addPhone() {\r\n                vm.form_data.phone.push(\r\n                    {number: vm.phone_number}\r\n                );\r\n\r\n                vm.phone_number = '';\r\n            }\r\n\r\n            /**\r\n             * Validation for main forms - Insert and Edit\r\n             */\r\n            function _formValidation() {\r\n                var regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n                if (vm.form_data.first_name === '' ||\r\n                    vm.form_data.last_name === '' ||\r\n                    vm.form_data.address === '' ||\r\n                    vm.form_data.postal_code === '' ||\r\n                    vm.form_data.city === '' ||\r\n                    vm.form_data.country === '' ||\r\n                    !regex.test(vm.form_data.email) ||\r\n                    vm.form_data.phone.length === 0) {\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Validation for merge form\r\n             */\r\n            function _mergeValidation() {\r\n                if (vm.form_data.address === '' ||\r\n                    vm.form_data.postal_code === '' ||\r\n                    vm.form_data.city === '' ||\r\n                    vm.form_data.country === '' ||\r\n                    vm.form_data.email === '' ||\r\n                    vm.form_data.phone.length === 0) {\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Get all contacts or specific one - if id is defined\r\n             * \r\n             * @param {Integer} id \r\n             */\r\n            function _getContacts(id) {\r\n                ContactsService.getContacts(id)\r\n                    .then(function(response) {\r\n                        if (id) {\r\n                            vm.form_data = response;\r\n                        } else {\r\n                            vm.contacts = response;\r\n                        }\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            /**\r\n             * Insert new contact into storage\r\n             */\r\n            function _addContact() {\r\n                ContactsService.addContact(vm.form_data)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                        vm.successMessage = true;\r\n                        $timeout(function() {\r\n                            vm.successMessage = false;\r\n                            vm.form_data = _newContact();\r\n                        }, 1500);\r\n                        _getContacts(null);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            /**\r\n             * Update current contact\r\n             */\r\n            function _updateContact() {\r\n                ContactsService.updateContact(vm.form_data)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                        vm.successMessage = true;\r\n                        $timeout(function() {vm.successMessage = false;}, 1500);\r\n                        _getContacts(null);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            /**\r\n             * Delete existing contact\r\n             * \r\n             * @param {Integer} id \r\n             */\r\n            function _deleteContact(id) {\r\n                var provided_id = id || vm.form_data.id;\r\n\r\n                ContactsService.deleteContact(provided_id)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                        _getContacts(null);\r\n                        vm.confirmDelete = false;\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n        };\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .filter('search', search);\r\n\r\n        function search() {\r\n            return function(contacts, term) {\r\n                var filtered_contacts = [];\r\n\r\n                contacts.forEach(function(contact) {\r\n                    if (contact.first_name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n                        contact.last_name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n                        contact.email.toLowerCase().startsWith(term.toLowerCase())) {\r\n\r\n                        filtered_contacts.push(contact);\r\n                    } else {\r\n                        contact.phone.forEach(function(phone) {\r\n                            if (phone.number.toLowerCase().startsWith(term.toLowerCase())) {\r\n                                filtered_contacts.push(contact);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                \r\n                return filtered_contacts;\r\n            }\r\n        }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .filter('startFrom', startFrom);\r\n\r\n        function startFrom() {\r\n            return function(input, start) {\r\n                start = +start;\r\n                return input ? input.slice(start) : [];\r\n            }\r\n        }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .service('ContactsService', ContactsService);\r\n\r\n        ContactsService.$inject = ['$q', '$http'];\r\n\r\n        function ContactsService($q, $http) {\r\n            var service = {};\r\n            var ENDPOINT_PATH = 'http://localhost:3000/contacts/';\r\n\r\n            _init();\r\n\r\n            function _init() {\r\n                service.getContacts = _getContacts;\r\n                service.addContact = _addContact;\r\n                service.updateContact = _updateContact;\r\n                service.deleteContact = _deleteContact;\r\n            }\r\n\r\n            /**\r\n             * Send request with specific id or empty string for all contacts\r\n             * \r\n             * @param {Integer} id \r\n             */\r\n            function _getContacts(id) {\r\n                var defer = $q.defer();\r\n                var provided_id = id || '';\r\n\r\n                $http.get(ENDPOINT_PATH + provided_id)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            /**\r\n             * Send data with newly created contact\r\n             * \r\n             * @param {Object} data \r\n             */\r\n            function _addContact(data) {\r\n                var defer = $q.defer();\r\n\r\n                $http.post(ENDPOINT_PATH, data)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            /**\r\n             * Send data to update current contact\r\n             * \r\n             * @param {Object} data \r\n             */\r\n            function _updateContact(data) {\r\n                var defer = $q.defer();\r\n\r\n                $http.put(ENDPOINT_PATH + data.id, data)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            /**\r\n             * Send specific id to perform delete operation\r\n             * \r\n             * @param {Integer} id \r\n             */\r\n            function _deleteContact(id) {\r\n                var defer = $q.defer();\r\n\r\n                $http.delete(ENDPOINT_PATH + id)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            return service;\r\n        };\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .directive('pagination', pagination);\r\n\r\n        function pagination() {\r\n            var directive = {\r\n                restrict: 'E',\r\n                scope: {\r\n                    items: '=',\r\n                    pageSize: '=',\r\n                    currentPage: '='\r\n                },\r\n                templateUrl: 'dist/views/pagination.html',\r\n                controller: PaginationController,\r\n                controllerAs: 'PGC',\r\n                bindToController: true,\r\n                link: linkFn\r\n            };\r\n\r\n            return directive;\r\n        }\r\n\r\n        function linkFn(scope, element, attrs) {}\r\n\r\n        PaginationController.$inject = [\r\n            '$scope'\r\n        ];\r\n\r\n        function PaginationController($scope) {\r\n            var vm = this;\r\n\r\n            /**\r\n             * Watches the items variable, and calls for _paginationSetup() function when the variable\r\n             * changes the value\r\n             */\r\n            $scope.$watch(function () {\r\n                return vm.items;\r\n            }, function(current, original) {\r\n                if (current.length) \r\n                    _paginationSetup();\r\n            });\r\n\r\n            /**\r\n             * Watches the vm.pageSize, and calls for _paginationSetup() function when the variable\r\n             * changes the value\r\n             */\r\n            $scope.$watch(function () {\r\n                return vm.pageSize;\r\n            }, _paginationSetup);\r\n\r\n            /**\r\n             * Sets current page\r\n             * \r\n             * @param {[Integer]} page [current page number]\r\n             */\r\n            vm.setPage = function(page) {\r\n                vm.currentPage = page;\r\n            };\r\n\r\n            /**\r\n             * Generates an array of numbers, which represent pages\r\n             * \r\n             * @param  {[Integer]} no_of_pages [Number of pages to be generated]\r\n             */\r\n            vm.generatePages = function(no_of_pages) {\r\n                var pages = [];\r\n                for (var i = 1; i <= no_of_pages; i++) {\r\n                    pages.push(i);\r\n                }\r\n                return pages;\r\n            };\r\n\r\n            /**\r\n             * Sets the maximum number of pages based on array length\r\n             */\r\n            function _paginationSetup() {\r\n                vm.maxPages = Math.ceil(vm.items.length / vm.pageSize);\r\n                if (vm.items.length / vm.pageSize < 1 &&\r\n                    vm.items.length / vm.pageSize > 0) {\r\n                    vm.maxPages = 1;\r\n                }\r\n                if(vm.items.length == 0) vm.maxPages = 0;\r\n            }\r\n        }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .directive('siteNavigation', siteNavigation);\r\n\r\n        function siteNavigation() {\r\n            var directive = {\r\n                restrict: 'E',\r\n                scope: {\r\n                    back: '@back',\r\n                    forward: '@forward'\r\n                },\r\n                templateUrl: 'dist/views/site_navigation.html',\r\n                controller: NavigationController,\r\n                controllerAs: 'NC',\r\n                bindToController: true,\r\n                link: linkFn\r\n            };\r\n\r\n            return directive;\r\n        }\r\n\r\n        function linkFn(scope, element, attrs) {\r\n            angular.element(element[0].childNodes[0].childNodes[1]).on('click', function() {\r\n                history.back();\r\n                scope.$apply();\r\n            });\r\n\r\n            angular.element(element[0].childNodes[0].childNodes[3]).on('click', function() {\r\n                history.forward();\r\n                scope.$apply();\r\n            });\r\n        }\r\n\r\n        NavigationController.$inject = [\r\n            '$scope'\r\n        ];\r\n\r\n        function NavigationController($scope) {\r\n            var vm = this;\r\n        }\r\n})();\r\n"]}