{"version":3,"sources":["main.module.js","controllers/contact.controller.js","directives/pagination.directive.js","directives/siteNavigation.directive.js","filters/search.filter.js","filters/startFrom.filter.js","services/contact.service.js"],"names":["config","$routeProvider","$locationProvider","hashPrefix","when","templateUrl","controller","controllerAs","runFn","$location","$rootScope","$on","event","next","current","angular","module","run","$inject","ContactsController","ContactsService","$route","_showForm","contact","vm","mergeFormVisible","merged_contact","form_data","_newContact","forEach","single_contact","preparedToDelete","push","id","_mergeList","mergeListVisible","sorted","_","orderBy","contacts","results","i","length","first_name","last_name","uniq","merge_list","groupBy","_mergeProcess","key_to_delete","Object","keys","key","index","map","contact_duped","_deleteContact","_addContact","address","postal_code","city","country","phone","email","_getContacts","getContacts","then","response","err","console","log","addContact","_updateContact","updateContact","provided_id","deleteContact","this","URL_ID","params","searchTerm","currentPage","pageSize","showForm","mergeList","mergeProcess","pagination","restrict","scope","items","PaginationController","bindToController","link","linkFn","element","attrs","$scope","_paginationSetup","maxPages","Math","ceil","$watch","original","setPage","page","generatePages","no_of_pages","pages","directive","siteNavigation","back","forward","NavigationController","childNodes","on","history","$apply","search","term","filtered_contacts","toLowerCase","startsWith","number","filter","startFrom","input","start","slice","$q","$http","defer","get","ENDPOINT_PATH","resolve","data","reject","promise","post","put","delete","service"],"mappings":"CAAA,WACA,YAiBA,SAAAA,GAAAC,EAAAC,GAEAA,EAAAC,WAAA,IAEAF,EACAG,KAAA,KACAC,YAAA,2BACAC,WAAA,qBACAC,aAAA,OAEAH,KAAA,gBACAC,YAAA,8BACAC,WAAA,qBACAC,aAAA,OAEAH,KAAA,qBACAC,YAAA,+BACAC,WAAA,qBACAC,aAAA,OAEAH,KAAA,uBACAC,YAAA,iCACAC,WAAA,qBACAC,aAAA,OASA,QAAAC,GAAAC,EAAAC,GACAA,EAAAC,IAAA,oBAAA,SAAAC,EAAAC,EAAAC,MAhDAC,QACAC,OAAA,aACA,YAGAD,QACAC,OAAA,aACAhB,OAAAA,GACAiB,IAAAT,GAEAR,EAAAkB,SACA,iBACA,qBA8BAV,EAAAU,SACA,YACA,kBC/CA,WACA,YAWA,SAAAC,GAAAC,EAAAC,GA2BA,QAAAC,GAAAC,GACAC,EAAAC,kBAAA,EACAD,EAAAE,eAAAH,EACAC,EAAAG,UAAAC,IAEAJ,EAAAE,eAAAG,QAAA,SAAAC,GACAN,EAAAO,iBAAAC,KAAAF,EAAAG,MAKA,QAAAC,KACAV,EAAAW,kBAAA,CAKA,KAAA,GAHAC,GAAAC,EAAAC,QAAAd,EAAAe,UAAA,aAAA,cACAC,KAEAC,EAAA,EAAAA,EAAAL,EAAAM,OAAA,EAAAD,IACAL,EAAAK,EAAA,GAAAE,YAAAP,EAAAK,GAAAE,YACAP,EAAAK,EAAA,GAAAG,WAAAR,EAAAK,GAAAG,YACAJ,EAAAR,KAAAI,EAAAK,IACAD,EAAAR,KAAAI,EAAAK,EAAA,IAIA,IAAAI,GAAAR,EAAAQ,KAAAL,EAEAhB,GAAAsB,WAAAT,EAAAU,QAAAF,EAAA,cAMA,QAAAG,KACA,GAAAC,GAAA,EAEAC,QAAAC,KAAA3B,EAAAsB,YAAAjB,QAAA,SAAAuB,EAAAC,GACA7B,EAAAsB,WAAAM,GAAAE,IAAA,SAAAC,GACAA,EAAAtB,IAAAT,EAAAO,iBAAA,KACAkB,EAAAG,aAKA5B,GAAAsB,WAAAG,GAGAzB,EAAAO,iBAAAF,QAAA,SAAAI,GACAuB,EAAAvB,KAGAwB,IAEAjC,EAAAO,oBAGA,QAAAH,KACA,OACAe,WAAA,GACAC,UAAA,GACAc,QAAA,GACAC,YAAA,GACAC,KAAA,GACAC,QAAA,GACAC,SACAC,MAAA,IAIA,QAAAC,GAAA/B,GACAb,EAAA6C,YAAAhC,GACAiC,KAAA,SAAAC,GACAlC,EACAT,EAAAG,UAAAwC,EAEA3C,EAAAe,SAAA4B,GAEA,SAAAC,GACAC,QAAAC,IAAAF,KAIA,QAAAX,KACArC,EAAAmD,WAAA/C,EAAAG,WACAuC,KAAA,SAAAC,GACAE,QAAAC,IAAAH,GACAH,EAAA,OACA,SAAAI,GACAC,QAAAC,IAAAF,KAIA,QAAAI,KACApD,EAAAqD,cAAAjD,EAAAG,WACAuC,KAAA,SAAAC,GACAE,QAAAC,IAAAH,IACA,SAAAC,GACAC,QAAAC,IAAAF,KAIA,QAAAZ,GAAAvB,GACA,GAAAyC,GAAAzC,GAAAT,EAAAG,UAAAM,EAEAb,GAAAuD,cAAAD,GACAR,KAAA,SAAAC,GACAE,QAAAC,IAAAH,GACAH,EAAA,OACA,SAAAI,GACAC,QAAAC,IAAAF,KAvIA,GAAA5C,GAAAoD,KACAC,EAAAxD,EAAAP,QAAAgE,OAAA7C,EAEAT,GAAAe,YACAf,EAAAG,aACAH,EAAAsB,cACAtB,EAAAuD,WAAA,GACAvD,EAAAwD,YAAA,EACAxD,EAAAyD,SAAA,EACAzD,EAAAC,kBAAA,EACAD,EAAAW,kBAAA,EACAX,EAAAO,oBAIA,WACAiC,EAAAa,GAEArD,EAAA+C,WAAAd,EACAjC,EAAAiD,cAAAD,EACAhD,EAAAmD,cAAAnB,EACAhC,EAAA0D,SAAA5D,EACAE,EAAA2D,UAAAjD,EACAV,EAAA4D,aAAApC,KAjCAjC,QACAC,OAAA,aACAV,WAAA,qBAAAa,GAEAA,EAAAD,SACA,kBACA,aCTA,WACA,YAMA,SAAAmE,KAeA,OAbAC,SAAA,IACAC,OACAC,MAAA,IACAP,SAAA,IACAD,YAAA,KAEA3E,YAAA,6BACAC,WAAAmF,EACAlF,aAAA,MACAmF,kBAAA,EACAC,KAAAC,GAMA,QAAAA,GAAAL,EAAAM,EAAAC,IAMA,QAAAL,GAAAM,GA+CA,QAAAC,KACAxE,EAAAyE,SAAAC,KAAAC,KAAA3E,EAAAgE,MAAA9C,OAAAlB,EAAAyD,UACAzD,EAAAgE,MAAA9C,OAAAlB,EAAAyD,SAAA,GACAzD,EAAAgE,MAAA9C,OAAAlB,EAAAyD,SAAA,IACAzD,EAAAyE,SAAA,GAEA,GAAAzE,EAAAgE,MAAA9C,SAAAlB,EAAAyE,SAAA,GApDA,GAAAzE,GAAAoD,IAMAmB,GAAAK,OAAA,WACA,MAAA5E,GAAAgE,OACA,SAAA1E,EAAAuF,GACAvF,EAAA4B,QACAsD,MAOAD,EAAAK,OAAA,WACA,MAAA5E,GAAAyD,UACAe,GAOAxE,EAAA8E,QAAA,SAAAC,GACA/E,EAAAwD,YAAAuB,GAQA/E,EAAAgF,cAAA,SAAAC,GAEA,IAAA,GADAC,MACAjE,EAAA,EAAAA,GAAAgE,EAAAhE,IACAiE,EAAA1E,KAAAS,EAEA,OAAAiE,IArEA3F,QACAC,OAAA,aACA2F,UAAA,aAAAtB,GAsBAI,EAAAvE,SACA,aC5BA,WACA,YAMA,SAAA0F,KAcA,OAZAtB,SAAA,IACAC,OACAsB,KAAA,QACAC,QAAA,YAEAzG,YAAA,kCACAC,WAAAyG,EACAxG,aAAA,KACAmF,kBAAA,EACAC,KAAAC,GAMA,QAAAA,GAAAL,EAAAM,EAAAC,GACA/E,QAAA8E,QAAAA,EAAA,GAAAmB,WAAA,IAAAC,GAAA,QAAA,WACAC,QAAAL,OACAtB,EAAA4B,WAGApG,QAAA8E,QAAAA,EAAA,GAAAmB,WAAA,IAAAC,GAAA,QAAA,WACAC,QAAAJ,UACAvB,EAAA4B,WAQA,QAAAJ,GAAAhB,IArCAhF,QACAC,OAAA,aACA2F,UAAA,iBAAAC,GA+BAG,EAAA7F,SACA,aCrCA,WACA,YAMA,SAAAkG,KACA,MAAA,UAAA7E,EAAA8E,GACA,GAAAC,KAiBA,OAfA/E,GAAAV,QAAA,SAAAN,GACAA,EAAAoB,WAAA4E,cAAAC,WAAAH,EAAAE,gBACAhG,EAAAqB,UAAA2E,cAAAC,WAAAH,EAAAE,gBACAhG,EAAAwC,MAAAwD,cAAAC,WAAAH,EAAAE,eAEAD,EAAAtF,KAAAT,GAEAA,EAAAuC,MAAAjC,QAAA,SAAAiC,GACAA,EAAA2D,OAAAF,cAAAC,WAAAH,EAAAE,gBACAD,EAAAtF,KAAAT,OAMA+F,GAvBAvG,QACAC,OAAA,aACA0G,OAAA,SAAAN,MCLA,WACA,YAMA,SAAAO,KACA,MAAA,UAAAC,EAAAC,GAEA,MADAA,IAAAA,EACAD,EAAAA,EAAAE,MAAAD,OAPA9G,QACAC,OAAA,aACA0G,OAAA,YAAAC,MCLA,WACA,YAQA,SAAAvG,GAAA2G,EAAAC,GAcA,QAAAhE,GAAA/B,GACA,GAAAgG,GAAAF,EAAAE,QACAvD,EAAAzC,GAAA,EASA,OAPA+F,GAAAE,IAAAC,EAAAzD,GACAR,KAAA,SAAAC,GACA8D,EAAAG,QAAAjE,EAAAkE,OACA,SAAAjE,GACA6D,EAAAK,OAAAlE,EAAAiE,QAGAJ,EAAAM,QAGA,QAAA9E,GAAA4E,GACA,GAAAJ,GAAAF,EAAAE,OASA,OAPAD,GAAAQ,KAAAL,EAAAE,GACAnE,KAAA,SAAAC,GACA8D,EAAAG,QAAAjE,EAAAkE,OACA,SAAAjE,GACA6D,EAAAK,OAAAlE,EAAAiE,QAGAJ,EAAAM,QAGA,QAAA/D,GAAA6D,GACA,GAAAJ,GAAAF,EAAAE,OASA,OAPAD,GAAAS,IAAAN,EAAAE,EAAApG,GAAAoG,GACAnE,KAAA,SAAAC,GACA8D,EAAAG,QAAAjE,EAAAkE,OACA,SAAAjE,GACA6D,EAAAK,OAAAlE,EAAAiE,QAGAJ,EAAAM,QAGA,QAAA/E,GAAAvB,GACA,GAAAgG,GAAAF,EAAAE,OASA,OAPAD,GAAAU,OAAAP,EAAAlG,GACAiC,KAAA,SAAAC,GACA8D,EAAAG,QAAAjE,EAAAkE,OACA,SAAAjE,GACA6D,EAAAK,OAAAlE,EAAAiE,QAGAJ,EAAAM,QA/DA,GAAAI,MACAR,EAAA,iCAiEA,OA7DA,YACAQ,EAAA1E,YAAAD,EACA2E,EAAApE,WAAAd,EACAkF,EAAAlE,cAAAD,EACAmE,EAAAhE,cAAAnB,KAyDAmF,EAzEA5H,QACAC,OAAA,aACA2H,QAAA,kBAAAvH,GAEAA,EAAAF,SAAA,KAAA","file":"app.js","sourcesContent":["(function() {\r\n    \"use strict\";\r\n\r\n    angular\r\n        .module('phonebook', [\r\n            'ngRoute'\r\n        ]);\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .config(config)\r\n        .run(runFn);\r\n\r\n        config.$inject = [\r\n            '$routeProvider', \r\n            '$locationProvider'\r\n        ];\r\n\r\n        function config($routeProvider, $locationProvider){\r\n\r\n            $locationProvider.hashPrefix('');\r\n\r\n            $routeProvider\r\n                .when('/', {\r\n                    templateUrl: 'dist/views/contacts.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/add', {\r\n                    templateUrl: 'dist/views/add_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/:id/edit', {\r\n                    templateUrl: 'dist/views/edit_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n                .when('/contact/:id/delete', {\r\n                    templateUrl: 'dist/views/delete_contact.html',\r\n                    controller: 'ContactsController',\r\n                    controllerAs: 'CC'\r\n                })\r\n        };\r\n\r\n        runFn.$inject = [\r\n            '$location',\r\n            '$rootScope'\r\n        ];\r\n\r\n        function runFn($location, $rootScope) {\r\n            $rootScope.$on('$routeChangeStart', function(event, next, current) {\r\n\r\n            });\r\n        };\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .controller('ContactsController', ContactsController);\r\n\r\n        ContactsController.$inject = [\r\n            'ContactsService',\r\n            '$route'\r\n        ];\r\n\r\n        function ContactsController(ContactsService, $route) {\r\n            var vm = this;\r\n            var URL_ID = $route.current.params.id;\r\n    \r\n            vm.contacts = [];\r\n            vm.form_data = {};\r\n            vm.merge_list = {};\r\n            vm.searchTerm = '';\r\n            vm.currentPage = 0;\r\n            vm.pageSize = 3;\r\n            vm.mergeFormVisible = false;\r\n            vm.mergeListVisible = false;\r\n            vm.preparedToDelete = [];\r\n\r\n            _init();\r\n\r\n            function _init() {\r\n                _getContacts(URL_ID);\r\n                \r\n                vm.addContact = _addContact;\r\n                vm.updateContact = _updateContact;\r\n                vm.deleteContact = _deleteContact;\r\n                vm.showForm = _showForm;\r\n                vm.mergeList = _mergeList;\r\n                vm.mergeProcess = _mergeProcess;\r\n            }\r\n\r\n            function _showForm(contact) {\r\n                vm.mergeFormVisible = true;\r\n                vm.merged_contact = contact;\r\n                vm.form_data = _newContact();\r\n\r\n                vm.merged_contact.forEach(function(single_contact) {\r\n                    vm.preparedToDelete.push(single_contact.id);\r\n                });\r\n            }\r\n\r\n\r\n            function _mergeList() {\r\n                vm.mergeListVisible = true;\r\n\r\n                var sorted = _.orderBy(vm.contacts, ['first_name', 'last_name']),\r\n                    results = [];\r\n\r\n                for (var i = 0; i < sorted.length - 1; i++) {\r\n                    if (sorted[i + 1].first_name == sorted[i].first_name &&\r\n                        sorted[i + 1].last_name == sorted[i].last_name) {\r\n                        results.push(sorted[i]);\r\n                        results.push(sorted[i + 1]);\r\n                    }\r\n                }\r\n\r\n                var uniq = _.uniq(results);\r\n\r\n                vm.merge_list = _.groupBy(uniq, 'first_name');\r\n                \r\n                \r\n            }\r\n\r\n\r\n            function _mergeProcess() {\r\n                var key_to_delete = '';\r\n\r\n                Object.keys(vm.merge_list).forEach(function(key, index) {\r\n                    vm.merge_list[key].map(function(contact_duped) {\r\n                        if (contact_duped.id == vm.preparedToDelete[0]) {\r\n                            key_to_delete = key;\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                delete vm.merge_list[key_to_delete];\r\n                    \r\n                // only way to make multiple delete request\r\n                vm.preparedToDelete.forEach(function(id) {\r\n                    _deleteContact(id);\r\n                });\r\n\r\n                _addContact();\r\n\r\n                vm.preparedToDelete = [];\r\n            }\r\n\r\n            function _newContact() {\r\n                return {\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    address: '',\r\n                    postal_code: '',\r\n                    city: '',\r\n                    country: '',\r\n                    phone: [],\r\n                    email: ''\r\n                }\r\n            }\r\n\r\n            function _getContacts(id) {\r\n                ContactsService.getContacts(id)\r\n                    .then(function(response) {\r\n                        if (id) {\r\n                            vm.form_data = response;\r\n                        } else {\r\n                            vm.contacts = response;\r\n                        }\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            function _addContact() {\r\n                ContactsService.addContact(vm.form_data)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                        _getContacts(null);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            function _updateContact() {\r\n                ContactsService.updateContact(vm.form_data)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n\r\n            function _deleteContact(id) {\r\n                var provided_id = id || vm.form_data.id;\r\n\r\n                ContactsService.deleteContact(provided_id)\r\n                    .then(function(response) {\r\n                        console.log(response);\r\n                        _getContacts(null);\r\n                    }, function(err) {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n        };\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .directive('pagination', pagination);\r\n\r\n        function pagination() {\r\n            var directive = {\r\n                restrict: 'E',\r\n                scope: {\r\n                    items: '=',\r\n                    pageSize: '=',\r\n                    currentPage: '='\r\n                },\r\n                templateUrl: 'dist/views/pagination.html',\r\n                controller: PaginationController,\r\n                controllerAs: 'PGC',\r\n                bindToController: true,\r\n                link: linkFn\r\n            };\r\n\r\n            return directive;\r\n        }\r\n\r\n        function linkFn(scope, element, attrs) {}\r\n\r\n        PaginationController.$inject = [\r\n            '$scope'\r\n        ];\r\n\r\n        function PaginationController($scope) {\r\n            var vm = this;\r\n\r\n            /**\r\n             * Watches the items variable, and calls for _paginationSetup() function when the variable\r\n             * changes the value\r\n             */\r\n            $scope.$watch(function () {\r\n                return vm.items;\r\n            }, function(current, original) {\r\n                if (current.length) \r\n                    _paginationSetup();\r\n            });\r\n\r\n            /**\r\n             * Watches the vm.pageSize, and calls for _paginationSetup() function when the variable\r\n             * changes the value\r\n             */\r\n            $scope.$watch(function () {\r\n                return vm.pageSize;\r\n            }, _paginationSetup);\r\n\r\n            /**\r\n             * Sets current page\r\n             * \r\n             * @param {[Integer]} page [current page number]\r\n             */\r\n            vm.setPage = function(page) {\r\n                vm.currentPage = page;\r\n            };\r\n\r\n            /**\r\n             * Generates an array of numbers, which represent pages\r\n             * \r\n             * @param  {[Integer]} no_of_pages [Number of pages to be generated]\r\n             */\r\n            vm.generatePages = function(no_of_pages) {\r\n                var pages = [];\r\n                for (var i = 1; i <= no_of_pages; i++) {\r\n                    pages.push(i);\r\n                }\r\n                return pages;\r\n            };\r\n\r\n            /**\r\n             * Sets the maximum number of pages based on array length\r\n             */\r\n            function _paginationSetup() {\r\n                vm.maxPages = Math.ceil(vm.items.length / vm.pageSize);\r\n                if (vm.items.length / vm.pageSize < 1 &&\r\n                    vm.items.length / vm.pageSize > 0) {\r\n                    vm.maxPages = 1;\r\n                }\r\n                if(vm.items.length == 0) vm.maxPages = 0;\r\n            }\r\n        }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .directive('siteNavigation', siteNavigation);\r\n\r\n        function siteNavigation() {\r\n            var directive = {\r\n                restrict: 'E',\r\n                scope: {\r\n                    back: '@back',\r\n                    forward: '@forward'\r\n                },\r\n                templateUrl: 'dist/views/site_navigation.html',\r\n                controller: NavigationController,\r\n                controllerAs: 'NC',\r\n                bindToController: true,\r\n                link: linkFn\r\n            };\r\n\r\n            return directive;\r\n        }\r\n\r\n        function linkFn(scope, element, attrs) {\r\n            angular.element(element[0].childNodes[0]).on('click', function() {\r\n                history.back();\r\n                scope.$apply();\r\n            });\r\n\r\n            angular.element(element[0].childNodes[1]).on('click', function() {\r\n                history.forward();\r\n                scope.$apply();\r\n            });\r\n        }\r\n\r\n        NavigationController.$inject = [\r\n            '$scope'\r\n        ];\r\n\r\n        function NavigationController($scope) {\r\n            var vm = this;\r\n        }\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .filter('search', search);\r\n\r\n        function search() {\r\n            return function(contacts, term) {\r\n                var filtered_contacts = [];\r\n\r\n                contacts.forEach(function(contact) {\r\n                    if (contact.first_name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n                        contact.last_name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n                        contact.email.toLowerCase().startsWith(term.toLowerCase())) {\r\n\r\n                        filtered_contacts.push(contact);\r\n                    } else {\r\n                        contact.phone.forEach(function(phone) {\r\n                            if (phone.number.toLowerCase().startsWith(term.toLowerCase())) {\r\n                                filtered_contacts.push(contact);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                return filtered_contacts;\r\n            }\r\n        }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .filter('startFrom', startFrom);\r\n\r\n        function startFrom() {\r\n            return function(input, start) {\r\n                start = +start;\r\n                return input ? input.slice(start) : [];\r\n            }\r\n        }\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('phonebook')\r\n        .service('ContactsService', ContactsService);\r\n\r\n        ContactsService.$inject = ['$q', '$http'];\r\n\r\n        function ContactsService($q, $http) {\r\n            var service = {};\r\n            var ENDPOINT_PATH = 'http://localhost:3000/contacts/';\r\n\r\n            _init();\r\n\r\n            function _init() {\r\n                service.getContacts = _getContacts;\r\n                service.addContact = _addContact;\r\n                service.updateContact = _updateContact;\r\n                service.deleteContact = _deleteContact;\r\n            }\r\n\r\n            \r\n            function _getContacts(id) {\r\n                var defer = $q.defer();\r\n                var provided_id = id || '';\r\n\r\n                $http.get(ENDPOINT_PATH + provided_id)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            function _addContact(data) {\r\n                var defer = $q.defer();\r\n\r\n                $http.post(ENDPOINT_PATH, data)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            function _updateContact(data) {\r\n                var defer = $q.defer();\r\n\r\n                $http.put(ENDPOINT_PATH + data.id, data)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            function _deleteContact(id) {\r\n                var defer = $q.defer();\r\n\r\n                $http.delete(ENDPOINT_PATH + id)\r\n                    .then(function(response) {\r\n                        defer.resolve(response.data);\r\n                    }, function(err) {\r\n                        defer.reject(err.data);\r\n                    });\r\n\r\n                return defer.promise;\r\n            }\r\n\r\n            return service;\r\n        };\r\n})();\r\n"]}